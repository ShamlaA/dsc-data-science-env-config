1
00:00:00,136 --> 00:00:04,037
So far, all of this module has been about

2
00:00:04,037 --> 00:00:07,033
retrieving data, but in this clip I want

3
00:00:07,033 --> 00:00:09,240
to talk for a short moment about changing

4
00:00:09,240 --> 00:00:11,751
data. You see, almost all of the indexing

5
00:00:11,751 --> 00:00:14,101
operations return a view on the original

6
00:00:14,101 --> 00:00:17,148
DataFrame, and you can assign values to

7
00:00:17,148 --> 00:00:20,089
that. Let's say I made an error in marking

8
00:00:20,089 --> 00:00:22,678
test 2, and both John and Laura deserve

9
00:00:22,678 --> 00:00:25,452
better grades. I can select their marks

10
00:00:25,452 --> 00:00:28,520
using loc, and then I can increase their

11
00:00:28,520 --> 00:00:32,007
scores with 1 by using += 1. Checking the

12
00:00:32,007 --> 00:00:35,335
contents of the DataFrame, we see that the

13
00:00:35,335 --> 00:00:38,010
grades have been updated. I can even

14
00:00:38,010 --> 00:00:40,987
upgrade an entire column at a time. Let's

15
00:00:40,987 --> 00:00:45,942
increase the grade on the first test, or

16
00:00:45,942 --> 00:00:49,358
for a specific student. So these indexing

17
00:00:49,358 --> 00:00:51,549
operations don't return new data, but a

18
00:00:51,549 --> 00:00:54,533
view on the original DataFrame allowing us

19
00:00:54,533 --> 00:00:57,809
to update it. You can also pass multiple

20
00:00:57,809 --> 00:01:00,946
values, so let me just set the grades for

21
00:01:00,946 --> 00:01:04,908
Pete, and passing a list updates multiple

22
00:01:04,908 --> 00:01:08,161
grades at once. You can even use

23
00:01:08,161 --> 00:01:10,330
assignment with the Boolean filters we've

24
00:01:10,330 --> 00:01:12,761
seen before. Let's convert the values we

25
00:01:12,761 --> 00:01:15,493
have right now into a string saying Pass

26
00:01:15,493 --> 00:01:18,135
or Fail. First I select all grades smaller

27
00:01:18,135 --> 00:01:21,074
than 6 and set them to the string Fail,

28
00:01:21,074 --> 00:01:23,707
and then I take everything larger than 6

29
00:01:23,707 --> 00:01:25,823
and covert those to Pass. Surprisingly,

30
00:01:25,823 --> 00:01:28,641
this converts everything to Pass, and

31
00:01:28,641 --> 00:01:31,740
that's because after the first line we

32
00:01:31,740 --> 00:01:34,763
have a DataFrame holding both numbers and

33
00:01:34,763 --> 00:01:37,005
strings, and comparing the strings to the

34
00:01:37,005 --> 00:01:39,599
number 6 in the next line always yields

35
00:01:39,599 --> 00:01:42,982
true, so we convert everything to the

36
00:01:42,982 --> 00:01:46,136
string Pass. Now one way to fix this is to

37
00:01:46,136 --> 00:01:48,050
first store the Boolean arrays in a

38
00:01:48,050 --> 00:01:50,387
variable. Remember that these expressions,

39
00:01:50,387 --> 00:01:53,998
grades smaller than 6 and grades larger

40
00:01:53,998 --> 00:01:57,735
than 6, return series of Booleans, so I

41
00:01:57,735 --> 00:02:00,891
can assign these series of Booleans to

42
00:02:00,891 --> 00:02:03,214
variables, and then I can use these

43
00:02:03,214 --> 00:02:05,034
variables inside the square brackets. Of

44
00:02:05,034 --> 00:02:07,114
course, right now this is not going to

45
00:02:07,114 --> 00:02:09,488
work because I already changed all my data

46
00:02:09,488 --> 00:02:11,822
into strings. So let's rerun the whole

47
00:02:11,822 --> 00:02:14,452
notebook from the start, and now we have

48
00:02:14,452 --> 00:02:16,746
the result we want. Now, of course, this

49
00:02:16,746 --> 00:02:18,953
is kind of a silly example, so let's make

50
00:02:18,953 --> 00:02:22,021
it a bit more realistic. I'll start by

51
00:02:22,021 --> 00:02:24,347
recreating the original data, because I

52
00:02:24,347 --> 00:02:27,077
want to leave the code above for you to

53
00:02:27,077 --> 00:02:29,238
read. So a more common scenario for a

54
00:02:29,238 --> 00:02:31,450
teacher is to take the average for each

55
00:02:31,450 --> 00:02:34,646
student, not for each test, so we want an

56
00:02:34,646 --> 00:02:37,820
average by row. But the mean method, by

57
00:02:37,820 --> 00:02:39,929
default, takes averages per column.

58
00:02:39,929 --> 00:02:42,319
Fortunately, we can add an argument, axis,

59
00:02:42,319 --> 00:02:45,326
and set it to 1, which means we want to

60
00:02:45,326 --> 00:02:47,407
average all of the rows, and this returns

61
00:02:47,407 --> 00:02:50,135
a series containing the averages per

62
00:02:50,135 --> 00:02:52,465
student. Now let's convert this to

63
00:02:52,465 --> 00:02:54,933
Booleans by saying greater than 6, and

64
00:02:54,933 --> 00:02:57,319
this gives us a series of Booleans. And we

65
00:02:57,319 --> 00:03:00,096
can actually add this data as a column to

66
00:03:00,096 --> 00:03:02,843
our DataFrame by simply using the name of

67
00:03:02,843 --> 00:03:05,270
new column for an index. So here I'm

68
00:03:05,270 --> 00:03:07,841
creating a new column and assigning it a

69
00:03:07,841 --> 00:03:09,802
Boolean value denoting whether this

70
00:03:09,802 --> 00:03:11,921
student passed. Now looking at the data,

71
00:03:11,921 --> 00:03:14,322
you can see that this column has now been

72
00:03:14,322 --> 00:03:17,039
added. So indexing also allows the

73
00:03:17,039 --> 00:03:19,529
creation of new columns. Sometimes when

74
00:03:19,529 --> 00:03:21,650
you make a mistake this also causes the

75
00:03:21,650 --> 00:03:23,895
creation of a new column. For example, I

76
00:03:23,895 --> 00:03:27,264
want to set Ann's grade on test 2 to an 8,

77
00:03:27,264 --> 00:03:29,892
but I forgot to use loc. Now this indexing

78
00:03:29,892 --> 00:03:31,734
operation is nonsense. We cannot pass a

79
00:03:31,734 --> 00:03:34,325
column and a row like this, so instead

80
00:03:34,325 --> 00:03:37,078
Pandas assumes I want to create a new

81
00:03:37,078 --> 00:03:38,712
column. Looking at the results, you see

82
00:03:38,712 --> 00:03:40,448
that there's now a new column that we

83
00:03:40,448 --> 00:03:42,069
didn't mean to create at all. We've

84
00:03:42,069 --> 00:03:44,724
already seen that one way to do this uses

85
00:03:44,724 --> 00:03:48,524
loc, but you might also try to do this

86
00:03:48,524 --> 00:03:50,862
without loc, selecting first the column

87
00:03:50,862 --> 00:03:53,850
and then the row with two different index

88
00:03:53,850 --> 00:03:56,005
operations. But this gives a warning.

89
00:03:56,005 --> 00:03:58,498
Checking grades, we see that the statement

90
00:03:58,498 --> 00:04:01,253
has been successfully executed, so what

91
00:04:01,253 --> 00:04:03,995
went wrong here? Well, using multiple

92
00:04:03,995 --> 00:04:06,725
index operations after each other is

93
00:04:06,725 --> 00:04:09,040
called chained indexing, and if you use

94
00:04:09,040 --> 00:04:11,176
those and try to assign a value to it,

95
00:04:11,176 --> 00:04:13,629
Pandas cannot guarantee that it will work,

96
00:04:13,629 --> 00:04:16,924
so in these cases it's better to use loc

97
00:04:16,924 --> 00:04:19,625
because that's more likely to work and

98
00:04:19,625 --> 00:04:22,258
it's faster anyway. Now you might wonder

99
00:04:22,258 --> 00:04:24,470
when exactly an indexing operation returns

100
00:04:24,470 --> 00:04:27,969
a view on the original data that we can

101
00:04:27,969 --> 00:04:30,881
safely assign to. Well, to quote the

102
00:04:30,881 --> 00:04:33,043
Pandas documentation, outside of simple

103
00:04:33,043 --> 00:04:35,401
cases, it's very hard to predict whether

104
00:04:35,401 --> 00:04:38,312
indexing will return a view or a copy, and

105
00:04:38,312 --> 00:04:40,367
that's exactly why Pandas gives the

106
00:04:40,367 --> 00:04:42,942
warning above, to let you know when you

107
00:04:42,942 --> 00:04:49,000
are in a situation where assignment may not work exactly the way you expect it.

