1
00:00:00,488 --> 00:00:03,566
Now that we know the dimensions and type

2
00:00:03,566 --> 00:00:06,643
of our data, let's do a little statistical

3
00:00:06,643 --> 00:00:09,329
exploration. We'll see how to get a

4
00:00:09,329 --> 00:00:12,054
general statistical overview, as well as a

5
00:00:12,054 --> 00:00:14,004
few more specific statistical functions,

6
00:00:14,004 --> 00:00:18,916
and a few basic plots. The next function

7
00:00:18,916 --> 00:00:21,784
we call on our dataset is df. describe,

8
00:00:21,784 --> 00:00:23,291
and this function gives a high-level

9
00:00:23,291 --> 00:00:25,210
overview of our data from a statistical

10
00:00:25,210 --> 00:00:28,105
standpoint. For each column it gives some

11
00:00:28,105 --> 00:00:31,340
basic statistical data, like the mean, the

12
00:00:31,340 --> 00:00:33,595
standard deviation, minimum and maximum

13
00:00:33,595 --> 00:00:36,006
values, and the quartiles. For the first

14
00:00:36,006 --> 00:00:37,547
three columns, which tell us about the

15
00:00:37,547 --> 00:00:39,749
moment that each sample was taken, this

16
00:00:39,749 --> 00:00:42,447
information doesn't make a lot of sense,

17
00:00:42,447 --> 00:00:44,604
but for the last two they do. Apparently

18
00:00:44,604 --> 00:00:46,504
for this weather station, which is located

19
00:00:46,504 --> 00:00:47,873
in the Netherlands, the average

20
00:00:47,873 --> 00:00:49,878
temperature was around 10 degrees Celsius

21
00:00:49,878 --> 00:00:52,429
over the whole year with a standard

22
00:00:52,429 --> 00:00:55,222
deviation of about 6 degrees. Looking at

23
00:00:55,222 --> 00:00:57,360
the quartiles, at first glance it looks

24
00:00:57,360 --> 00:00:58,969
like the temperatures are pretty evenly

25
00:00:58,969 --> 00:01:01,533
distributed around the mean. We can also

26
00:01:01,533 --> 00:01:04,558
see that the Month column is in the range

27
00:01:04,558 --> 00:01:07,837
from 1 to 12, and the Day counts from 1 to

28
00:01:07,837 --> 00:01:10,128
336, which makes sense because this data

29
00:01:10,128 --> 00:01:13,248
is from 2016, which was a leap year so it

30
00:01:13,248 --> 00:01:15,101
has one extra day. By the way, the

31
00:01:15,101 --> 00:01:16,804
behavior of the describe method depends on

32
00:01:16,804 --> 00:01:19,132
the type of data in your DataFrame, so if

33
00:01:19,132 --> 00:01:21,763
you have any columns that don't have just

34
00:01:21,763 --> 00:01:23,897
numbers, but, for example, objects or

35
00:01:23,897 --> 00:01:26,067
categorical types, you will see different

36
00:01:26,067 --> 00:01:28,624
results, and some columns may be ignored

37
00:01:28,624 --> 00:01:30,974
by the describe method altogether. Now you

38
00:01:30,974 --> 00:01:33,057
can get all of the numbers generated by

39
00:01:33,057 --> 00:01:35,261
describe in another way as well, by asking

40
00:01:35,261 --> 00:01:37,826
for them explicitly. To get the mean for

41
00:01:37,826 --> 00:01:40,161
the columns, for example, you call df.

42
00:01:40,161 --> 00:01:43,210
mean, and for the max df. max, etc., etc.

43
00:01:43,210 --> 00:01:45,832
But you can also run these methods against

44
00:01:45,832 --> 00:01:48,618
a single column. For example, to get the

45
00:01:48,618 --> 00:01:51,143
minimum pressure measured, I can say df

46
00:01:51,143 --> 00:01:53,096
followed by square brackets, and in there

47
00:01:53,096 --> 00:01:55,988
I put the name of the column I want to

48
00:01:55,988 --> 00:01:58,494
use, PRESSURE, and then I say. min, and

49
00:01:58,494 --> 00:02:00,200
this returns a single number, which is

50
00:02:00,200 --> 00:02:02,116
nice if I need to store it in a variable

51
00:02:02,116 --> 00:02:04,034
to do calculations with. There's a large

52
00:02:04,034 --> 00:02:06,392
number of things you can calculate in this

53
00:02:06,392 --> 00:02:08,454
way, and it's pointless to show all of

54
00:02:08,454 --> 00:02:11,456
them one by one, so let me show you how to

55
00:02:11,456 --> 00:02:13,426
get sort of an overview of what's

56
00:02:13,426 --> 00:02:15,370
possible. If you click on Help, and then

57
00:02:15,370 --> 00:02:16,891
Pandas Reference, this takes me straight

58
00:02:16,891 --> 00:02:19,223
to the Pandas documentation. And then I

59
00:02:19,223 --> 00:02:22,152
scroll all the way down to the API for the

60
00:02:22,152 --> 00:02:24,280
Series class. And then I have to scroll

61
00:02:24,280 --> 00:02:28,947
even further down to find the part about

62
00:02:28,947 --> 00:02:30,451
Computations/Descriptive Statistics. So

63
00:02:30,451 --> 00:02:32,431
here we see a list of many basic

64
00:02:32,431 --> 00:02:34,534
operations you can do on a Series, and

65
00:02:34,534 --> 00:02:37,499
almost all of these also work on your

66
00:02:37,499 --> 00:02:39,617
entire DataFrame. Here we find, for

67
00:02:39,617 --> 00:02:42,027
example, the count of all observations in

68
00:02:42,027 --> 00:02:45,816
the series, the kurtosis, the max and mean

69
00:02:45,816 --> 00:02:48,574
and median, quantiles, like percentiles

70
00:02:48,574 --> 00:02:51,592
and quartiles, ranks, standard deviation

71
00:02:51,592 --> 00:02:54,470
and variants, the sum of all the values,

72
00:02:54,470 --> 00:02:57,269
etc., etc. So if you want to know what the

73
00:02:57,269 --> 00:02:59,321
most often measured temperature is in this

74
00:02:59,321 --> 00:03:00,820
dataset, which in statistics you would

75
00:03:00,820 --> 00:03:02,980
call the mode, you should be able to find

76
00:03:02,980 --> 00:03:04,863
out that you can call the function mode

77
00:03:04,863 --> 00:03:06,955
for that, because it's in the reference I

78
00:03:06,955 --> 00:03:11,023
just showed you. So we can say df square

79
00:03:11,023 --> 00:03:13,202
brackets, temperature,. mode. Now this

80
00:03:13,202 --> 00:03:15,128
method always returns a Series, even when

81
00:03:15,128 --> 00:03:17,562
there's only a single value, so we see

82
00:03:17,562 --> 00:03:20,135
here that the first value of this Series

83
00:03:20,135 --> 00:03:23,524
is 6. 4, making 6. 4 degrees Celsius the

84
00:03:23,524 --> 00:03:25,501
most often occurring temperature. Finally,

85
00:03:25,501 --> 00:03:28,032
even though this course doesn't focus on

86
00:03:28,032 --> 00:03:30,285
visualization, I want to give you a few

87
00:03:30,285 --> 00:03:32,447
pointers for looking at the data in a

88
00:03:32,447 --> 00:03:34,057
graphical way. Most plotting functionality

89
00:03:34,057 --> 00:03:36,552
is accessed through the. plot attribute of

90
00:03:36,552 --> 00:03:39,865
a DataFrame or Series. To plot all

91
00:03:39,865 --> 00:03:43,438
temperatures, I can say df TEMP. plot, and

92
00:03:43,438 --> 00:03:45,266
this plots all temperatures as they occur

93
00:03:45,266 --> 00:03:47,325
in the series. Or maybe it's more

94
00:03:47,325 --> 00:03:49,559
informative to ask for a histogram by

95
00:03:49,559 --> 00:03:52,404
saying df TEMP. plot. hist. Now such a

96
00:03:52,404 --> 00:03:55,294
histogram you can make more or less fine

97
00:03:55,294 --> 00:03:57,844
grained with the bins parameter, so let's

98
00:03:57,844 --> 00:04:00,740
set bins to 100 and we get a histogram

99
00:04:00,740 --> 00:04:03,042
with 100 bars. Now, of course, there's a

100
00:04:03,042 --> 00:04:05,565
lot more to be said about visualization

101
00:04:05,565 --> 00:04:07,523
and data exploration, but I think this

102
00:04:07,523 --> 00:04:13,000
short demo gives a good first impression of the things Pandas can do.

