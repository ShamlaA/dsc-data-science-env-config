1
00:00:00,688 --> 00:00:04,843
So, after you load a new dataset into a

2
00:00:04,843 --> 00:00:07,305
Pandas DataFrame, usually you want to do

3
00:00:07,305 --> 00:00:09,601
more or less the following: check the

4
00:00:09,601 --> 00:00:12,248
shape property to get the dimensions of

5
00:00:12,248 --> 00:00:15,034
the data, call the info method to see what

6
00:00:15,034 --> 00:00:17,461
data type each column has, what kind of

7
00:00:17,461 --> 00:00:20,396
index you have and how much space all of

8
00:00:20,396 --> 00:00:22,849
this occupies in memory, call head or tail

9
00:00:22,849 --> 00:00:25,148
to check out what the data itself actually

10
00:00:25,148 --> 00:00:27,213
looks like, and by the way, don't forget

11
00:00:27,213 --> 00:00:29,200
you can pass an argument to tell those

12
00:00:29,200 --> 00:00:31,701
methods how many rows to show, and call

13
00:00:31,701 --> 00:00:34,216
the describe method to get a high-level

14
00:00:34,216 --> 00:00:37,073
overview of important statistics like the

15
00:00:37,073 --> 00:00:40,490
mean, max, and min, etc. A lot of the

16
00:00:40,490 --> 00:00:42,820
time, you may want to go one step further

17
00:00:42,820 --> 00:00:44,872
and check some more specific statistical

18
00:00:44,872 --> 00:00:47,847
properties. Pandas has a lot of common

19
00:00:47,847 --> 00:00:49,701
statistical operations built in, and all

20
00:00:49,701 --> 00:00:52,159
of the functions I mentioned here can be

21
00:00:52,159 --> 00:00:54,896
used both on a series or on a DataFrame.

22
00:00:54,896 --> 00:00:57,595
First of all, there are the max, min,

23
00:00:57,595 --> 00:00:59,832
mean, and median functions. All of these

24
00:00:59,832 --> 00:01:01,905
are also generated by the describe method,

25
00:01:01,905 --> 00:01:03,974
but sometimes you need to generate them

26
00:01:03,974 --> 00:01:06,426
for a specific column, or you may need

27
00:01:06,426 --> 00:01:08,649
them for a calculation. The mode function

28
00:01:08,649 --> 00:01:11,176
tells you the most common value in the

29
00:01:11,176 --> 00:01:13,069
dataset, and will return multiple values

30
00:01:13,069 --> 00:01:15,380
if necessary. There's also a method

31
00:01:15,380 --> 00:01:17,635
value_counts which returns a series with

32
00:01:17,635 --> 00:01:20,493
the number of times each value occurs in

33
00:01:20,493 --> 00:01:23,327
your dataset. But notice, as an exception

34
00:01:23,327 --> 00:01:26,720
this method can only be called on a

35
00:01:26,720 --> 00:01:29,817
Series, so on one of the columns in your

36
00:01:29,817 --> 00:01:32,320
data, not on the entire DataFrame. In some

37
00:01:32,320 --> 00:01:33,818
cases, you want some more information

38
00:01:33,818 --> 00:01:36,019
about the distribution of your data, and

39
00:01:36,019 --> 00:01:38,560
for these cases Pandas offers methods like

40
00:01:38,560 --> 00:01:41,851
std and var for the standard deviation and

41
00:01:41,851 --> 00:01:44,371
variants, or the skew, kurtosis, and

42
00:01:44,371 --> 00:01:46,666
quantile methods, which do exactly what

43
00:01:46,666 --> 00:01:48,872
their name implies. Of course, it's also

44
00:01:48,872 --> 00:01:50,990
quite easy to make the most beautiful and

45
00:01:50,990 --> 00:01:52,816
informative plots and graphs with Pandas,

46
00:01:52,816 --> 00:01:55,532
but I won't go into these much in this

47
00:01:55,532 --> 00:01:57,605
course because we will be focusing mainly

48
00:01:57,605 --> 00:02:00,226
on the DataFrame and Series classes, and

49
00:02:00,226 --> 00:02:03,469
what you can do with them. Now, I only

50
00:02:03,469 --> 00:02:05,895
showed you a very minimal demo of all of

51
00:02:05,895 --> 00:02:09,083
this, and let me take a step back and look

52
00:02:09,083 --> 00:02:11,653
at a realistic scenario. I loaded a

53
00:02:11,653 --> 00:02:13,978
dataset about UFO sightings and called

54
00:02:13,978 --> 00:02:17,100
info on it, and this is what I see. It's a

55
00:02:17,100 --> 00:02:19,364
lot less friendly than what we saw in the

56
00:02:19,364 --> 00:02:21,285
previous demo. The count for the columns

57
00:02:21,285 --> 00:02:24,251
differ a lot, which means that a lot of

58
00:02:24,251 --> 00:02:26,592
columns are missing values. Almost all the

59
00:02:26,592 --> 00:02:28,416
columns are objects, which can mean

60
00:02:28,416 --> 00:02:30,462
several things, but one thing it surely

61
00:02:30,462 --> 00:02:32,476
does not mean is that these columns

62
00:02:32,476 --> 00:02:34,755
contain clean number data. This is

63
00:02:34,755 --> 00:02:37,144
actually a much more realistic example

64
00:02:37,144 --> 00:02:39,947
than what we saw in the demo a moment ago.

65
00:02:39,947 --> 00:02:42,583
In a case like this, we need to clean up

66
00:02:42,583 --> 00:02:45,076
and transform the data, see what to do

67
00:02:45,076 --> 00:02:47,592
with missing or erratic values, and more,

68
00:02:47,592 --> 00:02:49,938
and that's exactly what we will do in this

69
00:02:49,938 --> 00:02:52,414
course. So let's move on to the next

70
00:02:52,414 --> 00:02:56,000
module about selecting, filtering, and sorting data.

