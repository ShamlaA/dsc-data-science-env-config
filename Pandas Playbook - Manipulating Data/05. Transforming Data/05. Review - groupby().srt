1
00:00:00,353 --> 00:00:04,195
So let's visualize what happens when I do

2
00:00:04,195 --> 00:00:06,843
a groupby. Let's take a look at this

3
00:00:06,843 --> 00:00:08,725
DataFrame here. We have a number of

4
00:00:08,725 --> 00:00:10,838
students, and we have a class column that

5
00:00:10,838 --> 00:00:13,938
tells me per student in which class he or

6
00:00:13,938 --> 00:00:17,495
she belongs. Now if I say df. groupby

7
00:00:17,495 --> 00:00:20,787
class, this splits up my DataFrame into

8
00:00:20,787 --> 00:00:23,413
groups per class. So internally the

9
00:00:23,413 --> 00:00:26,247
groupby object will have groups of data

10
00:00:26,247 --> 00:00:28,699
for my DataFrame. It doesn't really make

11
00:00:28,699 --> 00:00:30,865
internal DataFrames, but it's a nice way

12
00:00:30,865 --> 00:00:33,874
to think of it like that. Now the groupby

13
00:00:33,874 --> 00:00:36,199
object at this point hasn't done any

14
00:00:36,199 --> 00:00:38,475
calculations yet. It didn't even break up

15
00:00:38,475 --> 00:00:41,450
my data into groups really. It only starts

16
00:00:41,450 --> 00:00:44,261
doing real calculations when I call an

17
00:00:44,261 --> 00:00:47,318
aggregation function on it, like g. mean.

18
00:00:47,318 --> 00:00:49,855
At this point, it calculates means for all

19
00:00:49,855 --> 00:00:52,404
the columns in each of the groups, and

20
00:00:52,404 --> 00:00:55,034
then creates a new DataFrame out of that.

21
00:00:55,034 --> 00:00:57,834
So this results in a DataFrame with a row

22
00:00:57,834 --> 00:01:00,407
for every group, and then in each row for

23
00:01:00,407 --> 00:01:02,319
every column where we can calculate the

24
00:01:02,319 --> 00:01:06,504
mean, you will see the means. Now, in many

25
00:01:06,504 --> 00:01:08,983
cases you're only interested in the data

26
00:01:08,983 --> 00:01:11,752
in some of your columns, and the best

27
00:01:11,752 --> 00:01:14,414
thing to do here is to select these

28
00:01:14,414 --> 00:01:16,430
columns immediately when you make your

29
00:01:16,430 --> 00:01:18,793
groupby object. So like in the example

30
00:01:18,793 --> 00:01:21,560
here, I call groupby and immediately after

31
00:01:21,560 --> 00:01:24,678
the call to groupby I already select the

32
00:01:24,678 --> 00:01:27,438
columns I'm interested in. So here I say

33
00:01:27,438 --> 00:01:30,315
groupby sport and I select only the gold

34
00:01:30,315 --> 00:01:32,851
column, and this will cause groupby to

35
00:01:32,851 --> 00:01:35,290
only do calculations for that column. So

36
00:01:35,290 --> 00:01:38,532
then when I say. sum, only the sums for

37
00:01:38,532 --> 00:01:41,164
the gold column will be calculated. You

38
00:01:41,164 --> 00:01:43,832
can also groupby multiple columns. So the

39
00:01:43,832 --> 00:01:46,408
second example here shows you a call to

40
00:01:46,408 --> 00:01:48,702
groupby where I pass a list of columns,

41
00:01:48,702 --> 00:01:52,903
and in this case I'm grouping by both

42
00:01:52,903 --> 00:01:56,095
sport and nationality. Now if you do a

43
00:01:56,095 --> 00:01:58,034
groupby operation where you group on

44
00:01:58,034 --> 00:02:00,806
multiple columns, the result will have a

45
00:02:00,806 --> 00:02:03,355
multi-level index, like the example shown

46
00:02:03,355 --> 00:02:05,577
here. Now a multi-level index is something

47
00:02:05,577 --> 00:02:07,973
I'm not talking about a lot in this

48
00:02:07,973 --> 00:02:10,364
course, but the general concept is really

49
00:02:10,364 --> 00:02:13,148
easy to understand. In this case we have

50
00:02:13,148 --> 00:02:15,930
an index with two levels, sport and sex,

51
00:02:15,930 --> 00:02:18,986
and first we see a value for the sport

52
00:02:18,986 --> 00:02:21,604
index, boxing, and below that we see the

53
00:02:21,604 --> 00:02:23,444
different values for the sex column,

54
00:02:23,444 --> 00:02:25,614
female and male. Then we have another

55
00:02:25,614 --> 00:02:27,801
value in the sport index, cycling, and

56
00:02:27,801 --> 00:02:30,571
again below that we have the values for

57
00:02:30,571 --> 00:02:33,501
the second level index, sex. So if you use

58
00:02:33,501 --> 00:02:35,215
groupby and you select multiple columns,

59
00:02:35,215 --> 00:02:38,266
you will get a multi-level index, and in a

60
00:02:38,266 --> 00:02:40,459
moment we'll see some other operations

61
00:02:40,459 --> 00:02:45,292
that either result in or use multi-level

62
00:02:45,292 --> 00:02:48,109
indexes. Now what kind of functions can

63
00:02:48,109 --> 00:02:50,539
you call on a groupby object? Well,

64
00:02:50,539 --> 00:02:52,953
there's a number of functions that are a

65
00:02:52,953 --> 00:02:55,504
part of the groupby class, and those are

66
00:02:55,504 --> 00:02:57,588
optimized functions. You can see them

67
00:02:57,588 --> 00:02:59,690
listed above here. They're functions like

68
00:02:59,690 --> 00:03:02,165
count, sum, mean, min, max, and the

69
00:03:02,165 --> 00:03:04,598
standard deviation, etc., etc. But you can

70
00:03:04,598 --> 00:03:07,058
actually call all the functions on the

71
00:03:07,058 --> 00:03:09,708
underlying object as well. So if you

72
00:03:09,708 --> 00:03:12,720
groupby on a DataFrame, you can call all

73
00:03:12,720 --> 00:03:14,592
DataFrame functions on your groupby

74
00:03:14,592 --> 00:03:17,160
objects. Or you can use groupby to apply

75
00:03:17,160 --> 00:03:23,000
to actually call a function you defined yourself on the groupby object.

