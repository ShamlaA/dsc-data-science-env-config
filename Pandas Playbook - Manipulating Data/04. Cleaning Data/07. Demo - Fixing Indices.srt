1
00:00:00,842 --> 00:00:03,969
Let's do some final cleanup by cleaning

2
00:00:03,969 --> 00:00:07,509
the index of our dataset. As it turns out,

3
00:00:07,509 --> 00:00:09,797
the original csv data already contains an

4
00:00:09,797 --> 00:00:12,751
id for each athlete, so why not just use

5
00:00:12,751 --> 00:00:16,002
that for the index. We can do this by

6
00:00:16,002 --> 00:00:18,327
assigning this column to the property

7
00:00:18,327 --> 00:00:20,221
athletes. index. Now the only thing is

8
00:00:20,221 --> 00:00:22,320
that the id column is now still here, so

9
00:00:22,320 --> 00:00:25,404
now we have the id data twice. You can, of

10
00:00:25,404 --> 00:00:27,675
course, just drop the id column, but

11
00:00:27,675 --> 00:00:30,440
another approach is to not set the index

12
00:00:30,440 --> 00:00:32,473
directly, but use the set_index function.

13
00:00:32,473 --> 00:00:35,846
So here I say that I want to use the

14
00:00:35,846 --> 00:00:38,480
contents of the id column for the index,

15
00:00:38,480 --> 00:00:41,184
and after that please drop the id column

16
00:00:41,184 --> 00:00:44,281
and let's do this inplace as well. So now

17
00:00:44,281 --> 00:00:46,791
we have the athletes' id's as indices, and

18
00:00:46,791 --> 00:00:49,547
the id column is gone. Now let's say I

19
00:00:49,547 --> 00:00:51,922
want to change some column names as well.

20
00:00:51,922 --> 00:00:54,220
I can do this with the rename function,

21
00:00:54,220 --> 00:00:56,795
which lets me change column names using a

22
00:00:56,795 --> 00:00:59,450
dictionary. So let's change the name of

23
00:00:59,450 --> 00:01:02,067
the nationality column into the name

24
00:01:02,067 --> 00:01:05,321
country, and instead of sport we'll use

25
00:01:05,321 --> 00:01:08,253
the word discipline. And again, let's see

26
00:01:08,253 --> 00:01:11,328
the results. So this lets us change the

27
00:01:11,328 --> 00:01:13,924
labels on one or more columns. And you can

28
00:01:13,924 --> 00:01:16,554
use this function on the rows as well, but

29
00:01:16,554 --> 00:01:19,899
then the name of the first argument should

30
00:01:19,899 --> 00:01:22,666
be index instead of columns. As a final

31
00:01:22,666 --> 00:01:24,697
example, I want to take a moment to look

32
00:01:24,697 --> 00:01:26,672
at the weather dataset. Let me just read

33
00:01:26,672 --> 00:01:29,086
it in again, and let's just suppose I drop

34
00:01:29,086 --> 00:01:31,652
all rows with null values. And because in

35
00:01:31,652 --> 00:01:34,432
the original data only a small number of

36
00:01:34,432 --> 00:01:37,725
rows contained no empty values at all, we

37
00:01:37,725 --> 00:01:41,000
only have 831 rows left, so I just threw

38
00:01:41,000 --> 00:01:43,798
away the majority of my data, but the

39
00:01:43,798 --> 00:01:48,177
index, as you can see, still goes from 5

40
00:01:48,177 --> 00:01:51,892
to 8783. Taking a look at the actual data,

41
00:01:51,892 --> 00:01:55,406
you can see the gaps in the indices. Now

42
00:01:55,406 --> 00:01:58,077
we can easily fix this by calling

43
00:01:58,077 --> 00:02:00,672
reset_index, and this resets the index to

44
00:02:00,672 --> 00:02:03,770
a simple range counting from 0 to the end

45
00:02:03,770 --> 00:02:06,017
of the DataFrame. One side effect of this

46
00:02:06,017 --> 00:02:08,447
is that the old index is stored in a new

47
00:02:08,447 --> 00:02:11,036
column called Index, as you can see.

48
00:02:11,036 --> 00:02:13,318
Sometimes that's nice to have, but right

49
00:02:13,318 --> 00:02:15,476
now I just want to get rid of the old

50
00:02:15,476 --> 00:02:18,212
index so I add an a argument drop is True,

51
00:02:18,212 --> 00:02:25,000
and now we have our DataFrame with a nice continuously increasing index.

