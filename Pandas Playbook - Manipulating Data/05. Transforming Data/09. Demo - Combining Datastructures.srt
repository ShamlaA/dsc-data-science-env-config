1
00:00:00,452 --> 00:00:04,022
And that brings us to our last demo. Let's

2
00:00:04,022 --> 00:00:08,069
see how we can combine data from multiple

3
00:00:08,069 --> 00:00:12,182
data structures. So here I have my

4
00:00:12,182 --> 00:00:14,946
familiar grades dataset. Now let's say I

5
00:00:14,946 --> 00:00:16,909
have a Series that contains the result

6
00:00:16,909 --> 00:00:20,108
from a new test I took. So here I have a

7
00:00:20,108 --> 00:00:22,231
Series with results for every student, and

8
00:00:22,231 --> 00:00:25,439
to add this as a column I can simply

9
00:00:25,439 --> 00:00:28,300
assign this to a new column, and this

10
00:00:28,300 --> 00:00:31,142
simply adds the Series as a new column to

11
00:00:31,142 --> 00:00:33,132
our DataFrame. So this is a familiar

12
00:00:33,132 --> 00:00:35,577
scenario, and in a similar way we can add

13
00:00:35,577 --> 00:00:38,796
a row to this DataFrame. In this case I

14
00:00:38,796 --> 00:00:41,836
will use loc to do row-based indexing. So

15
00:00:41,836 --> 00:00:44,750
let's add grades for a student called Bob.

16
00:00:44,750 --> 00:00:47,404
Now in this case I can use a simple list

17
00:00:47,404 --> 00:00:49,362
to create the new row, but this wouldn't

18
00:00:49,362 --> 00:00:51,045
have worked for the column, because when I

19
00:00:51,045 --> 00:00:53,014
add a column I need something that

20
00:00:53,014 --> 00:00:55,491
contains indices, so I have to use a

21
00:00:55,491 --> 00:00:57,801
Series. Now just like Python lists,

22
00:00:57,801 --> 00:01:00,508
DataFrame also has an append method which

23
00:01:00,508 --> 00:01:03,279
lets us append rows to the end of our

24
00:01:03,279 --> 00:01:05,315
DataFrame. But when I pass a simple list

25
00:01:05,315 --> 00:01:07,621
to it, it doesn't work as I expected. You

26
00:01:07,621 --> 00:01:10,603
see, when I pass a list to append it

27
00:01:10,603 --> 00:01:13,100
interprets every element of this list as a

28
00:01:13,100 --> 00:01:16,032
single row, so it will add a row for the

29
00:01:16,032 --> 00:01:19,027
value 5 and a row for the value 4, etc.,

30
00:01:19,027 --> 00:01:21,172
etc. And because these elements don't have

31
00:01:21,172 --> 00:01:23,385
indices, we get this strange result here

32
00:01:23,385 --> 00:01:26,206
where there's a new column called 0, and

33
00:01:26,206 --> 00:01:29,575
the new rows also have indices like 0, 1,

34
00:01:29,575 --> 00:01:32,163
2, 3. Now to do this correctly, I actually

35
00:01:32,163 --> 00:01:34,302
want a data structure that has indices, so

36
00:01:34,302 --> 00:01:36,699
let's make a Series again. So here I've

37
00:01:36,699 --> 00:01:39,652
created a new Series called new_row, and

38
00:01:39,652 --> 00:01:42,576
it contains indices test_1, test_2,

39
00:01:42,576 --> 00:01:45,437
test_3, test_4, so we should be able to

40
00:01:45,437 --> 00:01:47,579
append this to my DataFrame. Let's see if

41
00:01:47,579 --> 00:01:50,085
it works. But now I get an error. It says

42
00:01:50,085 --> 00:01:52,027
it can only append a Series if

43
00:01:52,027 --> 00:01:54,362
ignore_index is true or if the Series has

44
00:01:54,362 --> 00:01:56,709
a name. Basically, Pandas wants to know

45
00:01:56,709 --> 00:01:59,383
how to set the row_index for this new_row,

46
00:01:59,383 --> 00:02:02,717
and the best way to do this is to actually

47
00:02:02,717 --> 00:02:05,268
give our Series a name. So the name of

48
00:02:05,268 --> 00:02:07,535
this Series will be used as the row_index.

49
00:02:07,535 --> 00:02:10,083
So here I'll give it the name of a

50
00:02:10,083 --> 00:02:12,696
student, Kim, and then if I append it, now

51
00:02:12,696 --> 00:02:15,478
the grades for Kim have been appended to

52
00:02:15,478 --> 00:02:18,790
my DataFrame. So that tells us how to add

53
00:02:18,790 --> 00:02:21,033
single dimensional data to our DataFrame

54
00:02:21,033 --> 00:02:23,022
in the sense of adding a row or a column,

55
00:02:23,022 --> 00:02:25,293
but what if I want to combine multiple

56
00:02:25,293 --> 00:02:27,958
DataFrames into one DataFrame? Well, to

57
00:02:27,958 --> 00:02:30,004
show you that, I'm going to add student

58
00:02:30,004 --> 00:02:32,604
numbers, so student id's to my DataFrame.

59
00:02:32,604 --> 00:02:35,338
So here I'm creating a new column,

60
00:02:35,338 --> 00:02:37,465
stud_nr, and I'm adding an id for every

61
00:02:37,465 --> 00:02:39,449
student, and then in the second line here

62
00:02:39,449 --> 00:02:42,407
I'm selecting the columns from my grades

63
00:02:42,407 --> 00:02:45,207
DataFrame in a specific order. So this

64
00:02:45,207 --> 00:02:47,954
lets me move the student number column to

65
00:02:47,954 --> 00:02:50,055
the first position, because otherwise if I

66
00:02:50,055 --> 00:02:51,928
wouldn't do this, then the student number

67
00:02:51,928 --> 00:02:54,523
column would now be the last column in my

68
00:02:54,523 --> 00:02:56,559
DataFrame, and I just think that's ugly.

69
00:02:56,559 --> 00:02:59,001
Very well, so now we have grades, and

70
00:02:59,001 --> 00:03:00,979
student numbers, and let's create a second

71
00:03:00,979 --> 00:03:03,167
DataFrame that I want to merge with this

72
00:03:03,167 --> 00:03:04,937
DataFrame. So here's a new DataFrame that

73
00:03:04,937 --> 00:03:07,059
has a different set of student numbers and

74
00:03:07,059 --> 00:03:09,700
two columns for two different exams. Now,

75
00:03:09,700 --> 00:03:13,526
I want to combine all of this data into a

76
00:03:13,526 --> 00:03:16,241
single new dataset, and for that there's

77
00:03:16,241 --> 00:03:19,236
the merge method. If I call grades. merge

78
00:03:19,236 --> 00:03:21,897
other, this is my result. I see columns

79
00:03:21,897 --> 00:03:24,388
for all my tests and my exams so that

80
00:03:24,388 --> 00:03:27,514
looks good, but why do I only see four

81
00:03:27,514 --> 00:03:30,096
rows? Well, the answer is simple, grades.

82
00:03:30,096 --> 00:03:32,746
merge, by default, does something we call

83
00:03:32,746 --> 00:03:35,291
an inner join, and what that means is it

84
00:03:35,291 --> 00:03:37,171
looks for a column that's present in both

85
00:03:37,171 --> 00:03:39,948
inputs, so in this case that's the student

86
00:03:39,948 --> 00:03:42,345
number column, and then it takes only

87
00:03:42,345 --> 00:03:44,663
those values from that column that are

88
00:03:44,663 --> 00:03:47,041
present in both inputs, so in this case

89
00:03:47,041 --> 00:03:49,148
only the four students that we see here

90
00:03:49,148 --> 00:03:51,665
were present in both inputs. Now merge

91
00:03:51,665 --> 00:03:54,450
takes an extra argument, how, and that

92
00:03:54,450 --> 00:03:56,681
lets me do different kinds of joins. So I

93
00:03:56,681 --> 00:03:59,107
can do a left join by saying how is left,

94
00:03:59,107 --> 00:04:01,850
and in that case I get a new DataFrame for

95
00:04:01,850 --> 00:04:04,183
all the student numbers that were present

96
00:04:04,183 --> 00:04:07,036
in my left input, so in the grades

97
00:04:07,036 --> 00:04:08,691
DataFrame. And you can also see that in

98
00:04:08,691 --> 00:04:10,406
the output now there are two students that

99
00:04:10,406 --> 00:04:14,150
have NaN for the two exams from my new

100
00:04:14,150 --> 00:04:16,187
DataFrame, because those two students are

101
00:04:16,187 --> 00:04:18,132
not present in my new DataFrame.

102
00:04:18,132 --> 00:04:20,829
Similarly, if I say how is right, I only

103
00:04:20,829 --> 00:04:23,346
get the students that are present in my

104
00:04:23,346 --> 00:04:25,721
second DataFrame, and here you can see

105
00:04:25,721 --> 00:04:28,962
that the four tests are empty for my last

106
00:04:28,962 --> 00:04:30,905
two students. Now there's also a final

107
00:04:30,905 --> 00:04:32,828
option called an outer join, and this will

108
00:04:32,828 --> 00:04:36,982
simply contain all the data from both

109
00:04:36,982 --> 00:04:40,495
inputs. And that's the end of this course.

110
00:04:40,495 --> 00:04:44,093
What have we seen in this module? Well, we

111
00:04:44,093 --> 00:04:46,465
started by doing calculations on our data.

112
00:04:46,465 --> 00:04:50,252
We saw basic math operations, we applied

113
00:04:50,252 --> 00:04:52,975
mathematical functions, and we wrote our

114
00:04:52,975 --> 00:04:55,847
own functions and applied those to our

115
00:04:55,847 --> 00:04:57,898
DataFrames. Then we took a good look at

116
00:04:57,898 --> 00:04:59,540
groupby and all the different kinds of

117
00:04:59,540 --> 00:05:02,414
operations you can do with that. We saw

118
00:05:02,414 --> 00:05:04,917
several ways to transform the structure of

119
00:05:04,917 --> 00:05:07,760
a DataFrame by moving data from rows to

120
00:05:07,760 --> 00:05:10,127
columns, or from columns to rows, and in

121
00:05:10,127 --> 00:05:12,962
the last demo we saw how we can combine

122
00:05:12,962 --> 00:05:16,181
multiple data structures into a single

123
00:05:16,181 --> 00:05:17,940
DataFrame. Thank you for watching this

124
00:05:17,940 --> 00:05:23,000
course. My name is Reindertjan Ekker for Pluralsight.

